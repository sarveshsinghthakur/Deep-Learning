# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gFcaxqtwRUyvhHMT49JO638KsZWA-kvy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, accuracy_score
from tensorflow.keras.models import Sequential,Model
from tensorflow.keras.layers import Dense, Dropout,Input
from tensorflow.keras.optimizers import Adam

from sklearn.datasets import load_breast_cancer
data = pd.read_csv('dataset/data.csv')
data.head()

x = data.drop(['id', 'diagnosis', 'Unnamed: 32'], axis=1)
y = data['diagnosis'].map({
                          'M':1,
                          'B':0
                    })

x_train,x_test,y_train,y_test= train_test_split(x,y,random_state=42,test_size=0.2)

sd = StandardScaler()
X_train = sd.fit_transform(x_train)
X_test = sd.transform(x_test)

models = Sequential([
    Dense(30, input_dim=X_train.shape[1], activation='relu'),
    Dropout(0.2),
    Dense(15, activation='relu'),
    Dense(1, activation='sigmoid')
])
models.summary()

models.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy',metrics=['accuracy'])

his = models.fit(X_train, y_train, epochs=100, batch_size=16, validation_split=0.2, verbose=1)

Y_pred = (models.predict(X_test)>0.5).astype('int32')

print("accuracy",accuracy_score(y_test,Y_pred))
print("classification_report",classification_report(y_test,Y_pred))

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(his.history['accuracy'], label='Training Accuracy')
plt.plot(his.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title('Accuracy Over Epochs')

plt.subplot(1, 2, 2)
plt.plot(his.history['loss'], label='Training Loss')
plt.plot(his.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('Loss Over Epochs')

plt.show()

#model 2 : functional api
inputs = Input(shape=(X_train.shape[1],))
x = Dense(64, activation='relu')(inputs)
x = Dense(32, activation='relu')(x)
outputs = Dense(1, activation='sigmoid')(x)
model = Model(inputs=inputs, outputs=outputs)
model.summary()

model.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=100, batch_size=16, validation_split=0.2, verbose=1)

y_pred = (model.predict(X_test)>0.5).astype('int32')

print("accuracy",accuracy_score(y_test,y_pred))
print("classification_report",classification_report(y_test,y_pred))

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title('Accuracy Over Epochs')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('Loss Over Epochs')

plt.show()