# -*- coding: utf-8 -*-
"""emotion detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GLJ5wHiRqU1yU6SfDjsFWMtDXwGP9HCp

# Installing Libraries
"""

!pip install tensorflow opencv-python kaggle

"""# Importing Datasets"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d msambare/fer2013

"""**Extract the zip file**"""

!unzip fer2013.zip -d fer2013

"""# Importing Dependencies"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout,BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns

"""# Locating the Path"""

train_path = '/content/fer2013/train'
test_path = '/content/fer2013/test'

"""**Image configuring**"""

img_height = 48
img_width = 48
batch_size = 64

train_gen = ImageDataGenerator(
  rescale = 1./255,
  rotation_range=30,
  shear_range=0.2,
  zoom_range=0.2,
  horizontal_flip=True
)

test_gen = ImageDataGenerator(rescale=1./255)

train_data = train_gen.flow_from_directory(
  train_path,
  target_size=(img_height, img_width),
  batch_size=batch_size,
  class_mode='categorical',
  shuffle=True,
  color_mode='grayscale'
)

test_data = test_gen.flow_from_directory(
  test_path,
  target_size=(img_height, img_width),
  batch_size=batch_size,
  class_mode='categorical',
  shuffle=True,
  color_mode='grayscale'
)

"""# Model : CNN"""

model = Sequential([
    Conv2D(64, (3,3), activation='relu', input_shape=(img_height, img_width, 1)),
    BatchNormalization(),
    MaxPooling2D(2,2),

    Conv2D(128, (3,3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(2,2),

    Conv2D(256, (3,3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(2,2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(7, activation='softmax')
])

"""**Compiling Model**"""

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

"""*Summary of model*"""

model.summary()

"""***Train the model***

IMPORTANT : Increase the epochs for better accuracy.
"""

epochs = 15
history = model.fit(
    train_data,
    validation_data=test_data,
    epochs=epochs
)

"""# Evaluating the model Accuracy"""

test_loss, test_accuracy = model.evaluate(test_data)
print(f"Test Accuracy: {test_accuracy*100:.2f}%")
print(f"Test Loss: {test_loss:.4f}")

"""# **Plot the model**"""

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.show()

"""# **Confusion Matrix of model**"""

Y_pred = model.predict(test_data)
y_pred = np.argmax(Y_pred, axis=1)
y_true = test_data.classes

cm = confusion_matrix(y_true, y_pred)
labels = list(test_data.class_indices.keys())

plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

print(classification_report(y_true, y_pred, target_names=labels))

"""# **Testing the model**"""



from PIL import Image
import os

class_labels = {v: k for k, v in train_data.class_indices.items()}

def predict_emotion(img_path):
    if not os.path.exists(img_path):
        return f"Error: Image file not found at {img_path}"

    if img_path.lower().endswith('.avif'):
        try:
            img_pil = Image.open(img_path)
            temp_img_path = img_path.replace('.avif', '.png').replace('.AVIF', '.png')
            img_pil.save(temp_img_path, format='PNG')
            img_path = temp_img_path
        except Exception as e:
            return f"Error converting AVIF to PNG: {e}"

    try:
        img = image.load_img(img_path, target_size=(48,48), color_mode='grayscale')
        img_array = image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0) / 255.0
        prediction = model.predict(img_array)
        predicted_class = np.argmax(prediction)
        emotion = class_labels[predicted_class]

        if 'temp_img_path' in locals() and os.path.exists(temp_img_path):
            os.remove(temp_img_path)
        plt.imshow(img, cmap='gray')
        plt.title(f"Predicted Emotion: {emotion}")
        plt.axis('off')
        plt.show()
        return emotion
    except Exception as e:
        if 'temp_img_path' in locals() and os.path.exists(temp_img_path):
            os.remove(temp_img_path)
        return f"Error loading or processing image: {e}"



image_path = '/content/depositphotos_374111884-stock-photo-cute-happy-face-close-face.jpg'
print(f"Predicted Emotion: {predict_emotion(image_path)}")