# -*- coding: utf-8 -*-
"""plant disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aaS9ZMYcr52bGXYb2VlNGUgW1AdQ8zNm
"""

!pip install tensorflow opencv-python

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!pip install kaggle
!kaggle datasets download -d vipoooool/new-plant-diseases-dataset
!unzip new-plant-diseases-dataset.zip -d new-plant-diseases-dataset

import tensorflow as tf
from tensorflow.keras import models, layers
import matplotlib.pyplot as plt
import numpy as np
import cv2
import os
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split

dir_name = "/content/new-plant-diseases-dataset/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/train"
batch_s = 32
img_h = 128
img_w = 128
seed = 123

train_data = tf.keras.preprocessing.image_dataset_from_directory(
    dir_name,
    validation_split=0.2,
    subset="training",
    seed=seed,
    image_size=(img_h, img_w),
    batch_size=batch_s
)
val_data = tf.keras.preprocessing.image_dataset_from_directory(
    dir_name,
    validation_split=0.2,
    subset="validation",
    seed=seed,
    image_size=(img_h, img_w),
    batch_size=batch_s
)

class_name = train_data.class_names
class_name

AUTOTUNE = tf.data.AUTOTUNE
train_data = train_data.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)
val_data = val_data.cache().prefetch(buffer_size=AUTOTUNE)

#model 1 : MobileNetV2
base_model = tf.keras.applications.MobileNetV2(input_shape=(img_h, img_w, 3),
                                               include_top=False,
                                               weights='imagenet')
base_model.trainable = False

model = tf.keras.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.2),
    layers.Dense(len(class_name), activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_data, validation_data=val_data, epochs=5)

loss, accuracy = model.evaluate(val_data)
print(f"Validation Accuracy: {accuracy:.2f}")

val_images = []
val_labels = []

for img_batch, label_batch in val_data:
    val_images.append(img_batch)
    val_labels.append(label_batch)

val_images = tf.concat(val_images, axis=0)
val_labels = tf.concat(val_labels, axis=0)

pred_probs = model.predict(val_images)
pred_classes = np.argmax(pred_probs, axis=1)

plt.figure(figsize=(12, 10))
for i in range(9):
    plt.subplot(3, 3, i+1)
    plt.imshow(val_images[i].numpy().astype("uint8"))
    true_label = class_name[val_labels[i]]
    pred_label = class_name[pred_classes[i]]
    color = "green" if true_label == pred_label else "red"
    plt.title(f"True: {true_label}\nPred: {pred_label}", color=color)
    plt.axis("off")
plt.tight_layout()
plt.show()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

cm = confusion_matrix(val_labels, pred_classes)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_name)
disp.plot(cmap='Blues', xticks_rotation=45)
plt.title("Confusion Matrix")
plt.show()

import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

def predict_plant_disease(img_path, model, class_names, img_height, img_width):
    img = image.load_img(img_path, target_size=(img_height, img_width))
    img_array = image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)
    predictions = model.predict(img_array)
    predicted_class = np.argmax(predictions[0])
    confidence = np.max(predictions[0]) * 100

    predicted_label = class_names[predicted_class]

    plt.imshow(img)
    plt.axis('off')
    plt.title(f"Prediction: {predicted_label} ({confidence:.2f}%)")
    plt.show()

    return predicted_label, confidence

img_path = "/content/corn_leaf_striping_V8.jpg"
label, confidence = predict_plant_disease(img_path, model, class_name, img_h, img_w)
print(f"Predicted: {label} with {confidence:.2f}% confidence")

import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

def predict_plant_disease(img_path, model, class_names, img_height, img_width):
    img = image.load_img(img_path, target_size=(img_height, img_width))
    img_array = image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)
    predictions = model.predict(img_array)
    predicted_class = np.argmax(predictions[0])
    confidence = np.max(predictions[0]) * 100

    predicted_label = class_names[predicted_class]

    plt.imshow(img)
    plt.axis('off')
    plt.title(f"Prediction: {predicted_label} ({confidence:.2f}%)")
    plt.show()

    return predicted_label, confidence

img_path = "/content/'Cercospora_capsici.jpg"
label, confidence = predict_plant_disease(img_path, model, class_name, img_h, img_w)
print(f"Predicted: {label} with {confidence:.2f}% confidence")