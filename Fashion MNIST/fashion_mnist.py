# -*- coding: utf-8 -*-
"""fashion mnist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15uinCUWrWL8bqG0qIqHGM1qHr5zLzi_f
"""

!pip install tensorflow opencv-python

import numpy as np
import matplotlib.pyplot as plt
import cv2
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc
from sklearn.preprocessing import label_binarize
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical
import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras import datasets,layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.applications import ResNet50

(ds_train, ds_test), ds_info = tfds.load(
    name='fashion_mnist',
    split=['train[:80%]', 'train[80%:]'],
    as_supervised=True,
    with_info=True
)

IMG_SIZE = 128
BATCH_SIZE = 32

def preprocess(image,label):
  image = tf.image.resize(image,(IMG_SIZE,IMG_SIZE))
  image = tf.cast(image,tf.float32)/255.0
  return image,label

ds_train = ds_train.map(preprocess).batch(BATCH_SIZE, drop_remainder=True).prefetch(tf.data.AUTOTUNE)
ds_test = ds_test.map(preprocess).batch(BATCH_SIZE, drop_remainder=True).prefetch(tf.data.AUTOTUNE)

def dataset_to_numpy(dataset):
    images, labels = [], []
    for image, label in dataset.unbatch():
        images.append(image.numpy())
        labels.append(label.numpy())
    return images, labels

x_train, y_train = dataset_to_numpy(ds_train)
x_test, y_test = dataset_to_numpy(ds_test)
x_train = np.array(x_train)
x_test = np.array(x_test)
y_train = np.array(y_train).reshape(-1)
y_test = np.array(y_test).reshape(-1)

#model 1 : CNN
models = Sequential([
    Conv2D(32,(3,3),activation='relu',input_shape=(128,128,1)),
    MaxPooling2D((2,2)),
    Conv2D(64,(3,3),activation='relu'),
    MaxPooling2D((2,2)),
    Conv2D(128,(3,3),activation='relu'),
    MaxPooling2D((2,2)),
    Flatten(),
    Dense(128,activation='relu'),
    Dense(10,activation='softmax')
])

models.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = models.fit(x_train, y_train, epochs=1, validation_data=(x_test, y_test))

print(f"Accuracy of model : {models.evaluate(x_test,y_test)[1]*100} % \n")
print(f"Loss of model : {models.evaluate(x_test,y_test)[0]*100} % \n")

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Validation Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')
plt.show()

plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label = 'val_loss')
plt.xlabel('Epoch')
plt.ylabel('loss')
plt.title('Training and Validation Loss')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')
plt.show()

models.save('fashion_mnist_model.h5')